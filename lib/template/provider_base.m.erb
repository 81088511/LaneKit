//
//  <%=@provider_base_file_name%>.m
//
//  LaneKit is available under the MIT license. See the LICENSE file for more info.
//
//  This base provider was created on <%=config[:generate_date]%> by LaneKit v<%=config[:lanekit_version]%>.
//
// The following LaneKit command was used to generate this file:
// <%=config[:command]%>
//

#import "<%=@provider_base_file_name%>.h"
#import "LKModel.h"

@implementation <%=@provider_base_class_name%>

- (void)downloadWithCompletionBlock:(LKResourceProviderCallbackBlock)completionBlock
{
  NSString *baseURL = self.baseURL;
  NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:baseURL]];
  RKResponseDescriptor *responseDescriptor = [self responseDescriptor];
  RKObjectRequestOperation *operation = [[RKObjectRequestOperation alloc] initWithRequest:request responseDescriptors:@[responseDescriptor]];

  [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];
  
  [operation setCompletionBlockWithSuccess:^(RKObjectRequestOperation *operation, RKMappingResult *mappingResult) {
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
    NSError *error = nil;
    id result = [self processResult:mappingResult withError:&error];
    completionBlock(nil, result);
  } failure:^(RKObjectRequestOperation *operation, NSError *error) {
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
    [self processError:error];
    completionBlock(error, nil);
  }];
  [operation start];
}

// Subclasses should override this method
- (Class)modelClass
{
  return [LKModel class];
}

// Subclasses should override this method
- (id)processResult:(RKMappingResult *)mappingResult withError:(NSError **)error
{
  return nil;
}

// Subclasses can override this method
- (void)processError:(NSError *)error
{
}

// Subclasses may need to override this method
- (RKResponseDescriptor *)responseDescriptor
{
  NSIndexSet *statusCodes = RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful);
  return [RKResponseDescriptor responseDescriptorWithMapping:[self.modelClass responseMapping]
                                                      method:RKRequestMethodGET
                                                 pathPattern:[self.modelClass pathPattern]
                                                     keyPath:[self.modelClass keyPath]
                                                 statusCodes:statusCodes];
}

@end
